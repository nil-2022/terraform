link : 1. https://registry.terraform.io/providers/hashicorp/aws/latest/docs
       2. https://registry.terraform.io/namespaces/terraform-aws-modules

Creating EC2 Instance using Terraform

Prerequisites
AWS Account
Create IAM User with Admin Access
Preinstalled Terraform
Create new Key pairs or use existing

Open VSCode, create a new file (name: main.tf)
 
provider "aws" {
  region = "region"
}
resource "aws_instance" "Demo" {
  ami           = "instance_id"
  instance_type = "instance_type"
  key_name = "key_name"
  tags = {
    Name = "instance_name"
  }
}

OR

provider "aws" {
  access_key = "ACCESS_KEY"
  secret_key = "SECRET_KEY"
  region     = "ap-south-1"
}

resource "aws_instance" "Demo" {
  ami           = "ami-0d758c1134823146a"
  instance_type = "t2.micro"
  key_name = "key_pair_name"
  tags = {
    Name = "Demo"
  }
}

Initialize the working directory for terraform using below command

Initialize the working directory for terraform using below command
terraform init

Check the execution plan before applying
terraform plan
terraform apply

To destroy the resource
terraform destroy

To destroy the resources without confirmation use below command
terraform destroy -auto-approve

IF Error: Unsupported block type

Blocks of type “tags” are not expected here. Did you mean to define argument

“tags”? If so, use the equals sign to assign it a value.

Solution:

tags = {
    Name = "value"
  }



How to Create VPC using Terraform




provider "aws" {
  region = "ap-south-1"
}

# Creating VPC,name, CIDR and Tags
resource "aws_vpc" "dev" {
  cidr_block           = "10.0.0.0/16"
  instance_tenancy     = "default"
  enable_dns_support   = "true"
  enable_dns_hostnames = "true"
  enable_classiclink   = "false"
  tags = {
    Name = "dev"
  }
}

# Creating Public Subnets in VPC
resource "aws_subnet" "dev-public-1" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-1a"

  tags = {
    Name = "dev-public-1"
  }
}

resource "aws_subnet" "dev-public-2" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-1b"

  tags = {
    Name = "dev-public-2"
  }
}

# Creating Internet Gateway in AWS VPC
resource "aws_internet_gateway" "dev-gw" {
  vpc_id = aws_vpc.dev.id

  tags = {
    Name = "dev"
  }
}

# Creating Route Tables for Internet gateway
resource "aws_route_table" "dev-public" {
  vpc_id = aws_vpc.dev.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dev-gw.id
  }

  tags = {
    Name = "dev-public-1"
  }
}

# Creating Route Associations public subnets
resource "aws_route_table_association" "dev-public-1-a" {
  subnet_id      = aws_subnet.dev-public-1.id
  route_table_id = aws_route_table.dev-public.id
}

resource "aws_route_table_association" "dev-public-2-a" {
  subnet_id      = aws_subnet.dev-public-2.id
  route_table_id = aws_route_table.dev-public.id
}


# Creating EC2 instances in public subnets
resource "aws_instance" "public_inst_1" {
  ami           = "ami-0c1a7f89451184c8b"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.dev-public-1.id}"
  key_name = "key11"
  tags = {
    Name = "public_inst_1"
  }
}

resource "aws_instance" "public_inst_2" {
  ami           = "ami-0c1a7f89451184c8b"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.dev-public-2.id}"
  key_name = "key11"
  tags = {
    Name = "public_inst_2"
  }
}



Create S3

provider "aws" {
  region = "us-east-1"
}
resource "aws_s3_bucket" "example" {
  bucket = "nil-2024"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}
